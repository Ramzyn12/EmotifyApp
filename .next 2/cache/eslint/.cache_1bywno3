[{"/Users/ramzynanou/Documents/emotify/src/app/api/auth/[...nextauth]/route.js":"1","/Users/ramzynanou/Documents/emotify/src/app/detect/error.js":"2","/Users/ramzynanou/Documents/emotify/src/app/detect/loading.js":"3","/Users/ramzynanou/Documents/emotify/src/app/detect/page.jsx":"4","/Users/ramzynanou/Documents/emotify/src/app/firebase.js":"5","/Users/ramzynanou/Documents/emotify/src/app/layout.js":"6","/Users/ramzynanou/Documents/emotify/src/app/loading.js":"7","/Users/ramzynanou/Documents/emotify/src/app/page.js":"8","/Users/ramzynanou/Documents/emotify/src/components/AuthProvider.jsx":"9","/Users/ramzynanou/Documents/emotify/src/components/Footer.jsx":"10","/Users/ramzynanou/Documents/emotify/src/components/Navbar.jsx":"11","/Users/ramzynanou/Documents/emotify/src/components/Notes.jsx":"12","/Users/ramzynanou/Documents/emotify/src/components/PlaylistModal.jsx":"13","/Users/ramzynanou/Documents/emotify/src/components/Tracks.jsx":"14","/Users/ramzynanou/Documents/emotify/src/components/TracksCarousel.jsx":"15","/Users/ramzynanou/Documents/emotify/src/components/Instructions.jsx":"16","/Users/ramzynanou/Documents/emotify/src/app/moodTracker/loading.js":"17","/Users/ramzynanou/Documents/emotify/src/app/moodTracker/page.jsx":"18"},{"size":2869,"mtime":1693213693277,"results":"19","hashOfConfig":"20"},{"size":508,"mtime":1693656730073,"results":"21","hashOfConfig":"20"},{"size":196,"mtime":1693656730076,"results":"22","hashOfConfig":"20"},{"size":27715,"mtime":1693670778624,"results":"23","hashOfConfig":"20"},{"size":719,"mtime":1692870905820,"results":"24","hashOfConfig":"20"},{"size":595,"mtime":1692794207467,"results":"25","hashOfConfig":"20"},{"size":194,"mtime":1693569880788,"results":"26","hashOfConfig":"20"},{"size":3889,"mtime":1693660431230,"results":"27","hashOfConfig":"20"},{"size":235,"mtime":1692794574793,"results":"28","hashOfConfig":"20"},{"size":125,"mtime":1692891855817,"results":"29","hashOfConfig":"20"},{"size":1985,"mtime":1693644714289,"results":"30","hashOfConfig":"20"},{"size":1215,"mtime":1693573535958,"results":"31","hashOfConfig":"20"},{"size":3370,"mtime":1693573086427,"results":"32","hashOfConfig":"20"},{"size":1635,"mtime":1693571299652,"results":"33","hashOfConfig":"20"},{"size":1631,"mtime":1693158579326,"results":"34","hashOfConfig":"20"},{"size":3028,"mtime":1693671053693,"results":"35","hashOfConfig":"20"},{"size":189,"mtime":1692974783000,"results":"36","hashOfConfig":"20"},{"size":6831,"mtime":1693649646521,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1l09s4",{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ramzynanou/Documents/emotify/src/app/api/auth/[...nextauth]/route.js",[],[],"/Users/ramzynanou/Documents/emotify/src/app/detect/error.js",[],[],"/Users/ramzynanou/Documents/emotify/src/app/detect/loading.js",[],[],"/Users/ramzynanou/Documents/emotify/src/app/detect/page.jsx",["96"],[],"\"use client\";\nimport React, { useEffect, useReducer, useRef, useState } from \"react\";\nimport * as faceapi from \"face-api.js\";\nimport Webcam from \"react-webcam\";\nimport { useSession } from \"next-auth/react\";\nimport { db } from \"../firebase\";\nimport {\n  doc,\n  addDoc,\n  collection,\n  query,\n  where,\n  getDocs,\n  deleteDoc,\n} from \"firebase/firestore\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faStar } from \"@fortawesome/free-regular-svg-icons\";\nimport {\n  fa1,\n  fa2,\n  fa3,\n  faFaceSmile,\n  faFaceAngry,\n  faFaceSurprise,\n  faFaceSadTear,\n  faFaceMeh,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { motion } from \"framer-motion\";\nimport { Slider } from \"@mui/material\";\n\nconst Page = () => {\n  const webcamRef = useRef(null);\n  const { data: session } = useSession();\n  const [recommendations, setRecommendations] = useState([]);\n  const [isWebcamReady, setWebcamReady] = useState(false);\n  const [isFetching, setIsFetching] = useState(false);\n  const [currentEmotion, setCurrentEmotion] = useState(\"\");\n  const [saveCurrEmotion, setSaveCurrEmotion] = useState(true);\n  const [likedTracks, setLikedTracks] = useState({});\n  const [emotionError, setEmotionError] = useState(null);\n  const [fetchError, setFetchError] = useState(null);\n  const [note, setNote] = useState(\"\");\n  const [showNotes, setShowNotes] = useState(false);\n  const [showCustomisation, setShowCustomisation] = useState(false);\n\n  const [useTopTracks, setUseTopTracks] = useState(true);\n  const [tempo, setTempo] = useState(0);\n  const [isTempoEnabled, setIsTempoEnabled] = useState(false);\n  const [danceability, setDanceability] = useState(0);\n  const [isDanceabilityEnabled, setIsDanceabilityEnabled] = useState(false);\n  const [maxDuration, setMaxDuration] = useState(0); // in seconds\n  const [isMaxDurationEnabled, setIsMaxDurationEnabled] = useState(false);\n\n  // This function will be called once the webcam is ready\n\n  useEffect(() => {\n    const loadModels = async () => {\n      await faceapi.nets.tinyFaceDetector.loadFromUri(\"/models\");\n      await faceapi.nets.faceExpressionNet.loadFromUri(\"/models\");\n      await faceapi.nets.faceLandmark68Net.loadFromUri(\"/models\");\n    };\n\n    loadModels();\n  }, []);\n\n  useEffect(() => {\n    // Check if the video element is available\n    if (webcamRef.current && webcamRef.current.video) {\n      const video = webcamRef.current.video;\n\n      // Set an event listener for the loadeddata event\n      video.onloadeddata = () => {\n        setWebcamReady(true);\n      };\n    }\n  }, [webcamRef]);\n\n  const detectEmotions = async () => {\n    if (webcamRef.current) {\n      const detections = await faceapi\n        .detectAllFaces(\n          webcamRef.current.video,\n          new faceapi.TinyFaceDetectorOptions()\n        )\n        .withFaceExpressions();\n\n      if (detections && detections.length > 0) {\n        const sortedExpressions = Object.entries(detections[0].expressions)\n          .sort(([, a], [, b]) => b - a)\n          .slice(0, 2);\n\n        setCurrentEmotion(sortedExpressions[0][0]);\n        if (saveCurrEmotion) {\n          await saveEmotion(sortedExpressions[0][0]);\n        }\n        setEmotionError(null); // Reset the error\n        return sortedExpressions;\n      } else {\n        setEmotionError(\"No emotion detected\"); // Set an error message\n      }\n    }\n  };\n\n  const getTopArtists = async (session) => {\n    try {\n      const topArtistsResponse = await fetch(\n        `https://api.spotify.com/v1/me/top/artists?limit=20&offset=${Math.floor(\n          Math.random() * 15\n        )}`,\n        {\n          headers: {\n            Authorization: `Bearer ${session?.accessToken}`,\n          },\n        }\n      );\n\n      if (topArtistsResponse.status === 403) {\n        throw new Error(\n          \"You are not a registered user, please logout and see mood Tracker page for next steps\"\n        );\n      }\n\n      if (topArtistsResponse.status === 504) {\n        throw new Error(\n          \"The server took too long to respond. Please try again later.\"\n        );\n      }\n\n      if (topArtistsResponse.ok) {\n        return await topArtistsResponse.json();\n      } else {\n        if (topArtistsResponse.status === 401) {\n          throw new Error(\n            \"You are not authorized anymore. Please Log out and then in again.\"\n          );\n        } else {\n          throw new Error(\n            `Failed to get recommendations. Please try again later`\n          );\n        }\n      }\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const fetchRecommendations = async (session, emotion, seedString) => {\n    let targetValence = 0.5; // Default to Neutral\n    let targetEnergy;\n    switch (emotion) {\n      case \"happy\":\n        targetValence = 0.8;\n        seedString += \"&seed_genres=happy\";\n        break;\n      case \"sad\":\n        targetValence = 0.2;\n        seedString += \"&seed_genres=sad\";\n        break;\n      case \"fearful\":\n        seedString = \"&seed_genres=rock\";\n        break;\n      case \"angry\":\n        seedString += \"&seed_genres=metal\";\n        targetValence = 0.2;\n        targetEnergy = 0.8;\n        break;\n      case \"disgusted\":\n        seedString += \"&seed_genres=death-metal\";\n        targetValence = 0.2;\n        targetEnergy = 0.2;\n\n        break;\n      case \"surprised\":\n        seedString += \"&seed_genres=dance\";\n        targetEnergy = 0.8;\n        break;\n      case \"neutral\":\n        seedString += \"&seed_genres=pop\";\n        break;\n      default:\n        console.log(emotion, `Sorry, we are out of emotions`);\n    }\n\n    const params = new URLSearchParams({\n      limit: 99,\n      target_valence: targetValence,\n    });\n\n    if (targetEnergy) {\n      params.append(\"target_energy\", targetEnergy);\n    }\n\n    if (isTempoEnabled && tempo !== null) {\n      params.append(\"target_tempo\", tempo);\n    }\n\n    if (isDanceabilityEnabled && danceability !== null) {\n      params.append(\"target_danceability\", danceability / 100);\n    }\n\n    if (isMaxDurationEnabled && maxDuration !== null) {\n      params.append(\"max_duration_ms\", maxDuration * 1000);\n    }\n\n    const url = `https://api.spotify.com/v1/recommendations?${seedString}&${params.toString()}&min_duration_ms=120000`;\n\n    const recommendationsResponse = await fetch(url, {\n      headers: {\n        Authorization: `Bearer ${session?.accessToken}`,\n      },\n    });\n\n    if (recommendationsResponse.status === 403) {\n      throw new Error(\n        \"You are not a registered user, please logout and see mood Tracker page for next steps\"\n      );\n    }\n\n    if (recommendationsResponse.status === 504) {\n      throw new Error(\n        \"The server took too long to respond. Please try again later.\"\n      );\n    }\n\n    if (recommendationsResponse.ok) {\n      const recommendationsData = await recommendationsResponse.json();\n      const tracks = recommendationsData.tracks;\n\n      if (tracks && tracks.length > 0) {\n        const shuffledTracks = tracks\n          .sort(() => Math.random() - 0.5)\n          .slice(0, 3);\n        setRecommendations(shuffledTracks);\n      } else {\n        throw new Error(\"Not Enough Tracks, Please Increase Max Duration\");\n      }\n    } else {\n      throw new Error(`Failed to get recommendations. Please try again later`);\n    }\n  };\n\n  const getPlaylist = async () => {\n    setIsFetching(true);\n    setFetchError(null);\n\n    const emotionResults = await detectEmotions();\n\n    if (!emotionResults) {\n      setIsFetching(false);\n      return;\n    }\n\n    if (!session || !session.accessToken) {\n      setIsFetching(false);\n      setFetchError(\"Please Login to use the recommended songs feature\");\n      return;\n    }\n\n    const emotion = emotionResults[0][0];\n\n    // Step 2: Get User's Top Artists\n    let topArtistsData; // Declare it here\n    let seedString = \"\";\n\n    // remove true\n    if (useTopTracks) {\n      try {\n        topArtistsData = await getTopArtists(session);\n      } catch (error) {\n        setFetchError(error.message);\n        setIsFetching(false);\n        return;\n      }\n\n      if (topArtistsData.items && topArtistsData.items.length > 0) {\n        const topArtistIds = topArtistsData.items\n          .slice(0, 4)\n          .map((artist) => artist.id)\n          .join(\",\");\n        seedString = `&seed_artists=${topArtistIds}`;\n      } else {\n        // Fallback to a predefined artist or genre\n        seedString = \"&seed_genres=pop\";\n      }\n    }\n\n    try {\n      await fetchRecommendations(session, emotion, seedString);\n    } catch (error) {\n      setFetchError(error.message);\n      setIsFetching(false);\n      return;\n    }\n\n    setIsFetching(false);\n  };\n\n  const handleLikeClick = async (trackObject) => {\n    if (!session) {\n      console.error(\"User is not authenticated.\");\n      return;\n    }\n\n    setLikedTracks((prevState) => ({\n      ...prevState,\n      [trackObject.name]: !prevState[trackObject.name],\n    }));\n\n    const now = new Date();\n    const localTimeHours = String(now.getHours()).padStart(2, \"0\");\n    const localTimeMinutes = String(now.getMinutes()).padStart(2, \"0\");\n    const currentTime = `${localTimeHours}:${localTimeMinutes}`; // HH:MM format\n\n    const currentDate = now.toISOString().split(\"T\")[0]; // YYYY-MM-DD format\n\n    const trackData = {\n      trackName: trackObject.name,\n      trackArtist: trackObject.artists[0].name,\n      date: currentDate,\n      url: trackObject.external_urls.spotify,\n      mood: currentEmotion,\n      imageSrc: trackObject.album.images[1].url,\n      time: currentTime, // Storing the time\n      // add other relevant data as needed\n    };\n\n    try {\n      // Check if a document for this user already exists\n      const userDocRef = doc(db, \"users\", session.user.email);\n      await addDoc(collection(userDocRef, \"likedTracks\"), trackData);\n\n      console.log(\"Track liked and saved successfully!\");\n    } catch (error) {\n      console.error(\"Error saving liked track:\", error);\n    }\n  };\n\n  const handleSaveNote = async () => {\n    if (!session) {\n      console.error(\"User is not authenticated.\");\n      return;\n    }\n\n    const now = new Date();\n    const localTimeHours = String(now.getHours()).padStart(2, \"0\");\n    const localTimeMinutes = String(now.getMinutes()).padStart(2, \"0\");\n    const currentTime = `${localTimeHours}:${localTimeMinutes}`; // HH:MM format\n\n    const currentDate = now.toISOString().split(\"T\")[0]; // YYYY-MM-DD format\n\n    const noteData = {\n      date: currentDate,\n      time: currentTime,\n      mood: currentEmotion || \"No Emotion\",\n      note: note, // The note content\n    };\n\n    try {\n      const userDocRef = doc(db, \"users\", session.user.email);\n      await addDoc(collection(userDocRef, \"notes\"), noteData);\n      console.log(\"Note saved successfully!\");\n    } catch (error) {\n      console.error(\"Error saving note:\", error);\n    }\n    setNote(\"\");\n  };\n\n  const saveEmotion = async (detectedEmotion) => {\n    if (!session) {\n      console.error(\"User is not authenticated.\");\n      return;\n    }\n\n    const now = new Date();\n    const localTimeHours = String(now.getHours()).padStart(2, \"0\");\n    const localTimeMinutes = String(now.getMinutes()).padStart(2, \"0\");\n    const currentTime = `${localTimeHours}:${localTimeMinutes}`; // HH:MM format\n\n    const currentDate = now.toISOString().split(\"T\")[0]; // YYYY-MM-DD format\n\n    const emotionData = {\n      mood: detectedEmotion,\n      time: currentTime,\n      date: currentDate,\n    };\n\n    try {\n      const userDocRef = doc(db, \"users\", session.user.email);\n      await addDoc(collection(userDocRef, \"emotions\"), emotionData);\n      console.log(\"Emotion saved successfully!\");\n    } catch (error) {\n      console.error(\"Error saving emotion:\", error);\n    }\n  };\n\n  const emotionColourMap = {\n    happy: [\"bg-green-400\", \"text-green-400\"],\n    sad: [\"bg-purple-800\", \"text-purple-800\"],\n    neutral: [\"bg-blue-500\", \"text-blue-500\"],\n    surprised: [\"bg-yellow-400\", \"text-yellow-400\"],\n    disgusted: [\"bg-stone-600\", \"text-stone-600\"],\n    fearful: [\"bg-yellow-400\", \"text-yellow-400\"],\n    angry: [\"bg-red-500\", \"text-red-500\"],\n  };\n\n  const emotionIcon = {\n    happy: faFaceSmile,\n    sad: faFaceSadTear,\n    neutral: faFaceMeh,\n    surprised: faFaceSurprise,\n    angry: faFaceAngry,\n    disgusted: faFaceSurprise,\n    fearful: faFaceSurprise,\n  };\n\n  const buttonVariants = {\n    initial: { x: \"-100\" },\n    enter: { x: 0 },\n  };\n\n  const buttonVariants2 = {\n    initial: { x: \"100\" },\n    enter: { x: 0 },\n  };\n\n  const notesVariants = {\n    initial: { y: \"-100%\" },\n    enter: { y: 0 },\n  };\n\n  return (\n    <div className=\"min-h-screen pb-9 w-full bg-slate-900\">\n      {/* change font */}\n      <h1\n        className={`text-4xl uppercase font-homeTitle text-center text-white pt-10`}\n      >\n        Lets Tune Into Your Emotions!\n      </h1>\n      <div className=\"flex w-full justify-around\">\n        <p className=\"text-slate-400 flex items-center font-sans text-2xl mt-8 text-center \">\n          <FontAwesomeIcon\n            className=\"border-2 rounded-lg border-slate-400 px-3 py-2\"\n            icon={fa1}\n          />\n          <span className=\"ml-3\">Position Your Face In The Centre</span>\n        </p>\n        <p className=\"text-slate-400 flex items-center font-sans text-2xl mt-8 text-center \">\n          <FontAwesomeIcon\n            className=\"border-2 rounded-lg border-slate-400 px-3 py-2\"\n            icon={fa2}\n          />\n          <span className=\"ml-3\">Let Your Emotions Flud Out</span>\n        </p>\n        <p className=\"text-slate-400 flex items-center font-sans text-2xl mt-8 text-center \">\n          <FontAwesomeIcon\n            className=\"border-2 border-slate-400 rounded-lg px-3 py-2\"\n            icon={fa3}\n          />\n          <span className=\"ml-3\">Click Your Webcam When Ready</span>{\" \"}\n        </p>\n      </div>\n      {/* save emotion? */}\n      <div className=\"flex mt-10 w-full justify-center text-white text-2xl font-navLinks items-center\">\n        <div className=\"flex gap-2 items-center bg-slate-950 p-4 rounded-xl\">\n          <label>Save emotions to tracker</label>\n          <input\n            type=\"checkbox\"\n            checked={saveCurrEmotion}\n            onChange={() => setSaveCurrEmotion(!saveCurrEmotion)}\n            className=\"form-checkbox h-5 w-5 text-blue-600\"\n          ></input>\n        </div>\n      </div>\n\n      <div className=\"flex flex-col mx-auto w-full items-center justify-center\">\n        {/* Webcam Section */}\n        <div className=\"rounded-xl bg-slate-700 p-4 mt-10 flex items-center justify-between w-full\">\n          {!showNotes && (\n            <motion.div\n              variants={buttonVariants}\n              initial=\"initial\"\n              animate=\"enter\"\n              // exit=\"exit\"\n              className=\"w-1/3 h-full flex items-center justify-end text-white font-homeTitle text-2xl tracking-wide\"\n              onClick={() => setShowNotes(true)}\n            >\n              <div className=\"w-1/2 cursor-pointer hover:w-full transition-all duration-300 ease-in-out capitalize h-32 rounded-l-xl flex items-center justify-center bg-green-700 capitalise\">\n                add notes\n              </div>\n            </motion.div>\n          )}\n          {showNotes && (\n            <div className=\"w-1/3 h-full p-4 flex items-center justify-center\">\n              <motion.div\n                variants={notesVariants}\n                initial=\"initial\"\n                animate=\"enter\"\n                exit=\"exit\"\n                className={`bg-slate-200 p-6 w-full rounded-lg shadow-md`}\n              >\n                <h3 className=\"text-slate-900 text-lg capitalize mb-3\">\n                  {currentEmotion\n                    ? `You seem to be feeling ${currentEmotion}. Any thoughts?`\n                    : \"No emotion detected yet. Any pre-thoughts?\"}{\" \"}\n                </h3>\n                <textarea\n                  className=\"w-full h-32 p-3 rounded-md bg-opacity-50 text-slate-800 placeholder-gray-400\"\n                  value={note}\n                  onChange={(e) => setNote(e.target.value)}\n                  placeholder={\n                    session\n                      ? \"Write your thoughts here...\"\n                      : \"Login to use notes feature\"\n                  }\n                ></textarea>\n                <div className=\"w-full flex justify-between items-end\">\n                  <button\n                    onClick={handleSaveNote}\n                    className=\"mt-2 bg-blue-500 py-1 px-2 rounded-lg hover:bg-blue-700 text-white font-bold \"\n                  >\n                    Save Note\n                  </button>\n                  <button\n                    className=\"bg-red-600 px-2 py-1 rounded-lg  text-white font-bold\"\n                    onClick={() => setShowNotes(false)}\n                  >\n                    Close\n                  </button>\n                </div>\n              </motion.div>\n            </div>\n          )}\n          {!isWebcamReady && (\n            <div className=\" flex text-2xl rounded-xl  text-white font-sans  items-center bg-slate-300 animate-pulse justify-center w-1/3 h-[300px]\">\n              Loading webcam...\n            </div>\n          )}\n          <Webcam\n            onClick={getPlaylist}\n            className=\"rounded-xl w-1/3 cursor-pointer\"\n            ref={webcamRef}\n            style={{ display: isWebcamReady ? \"block\" : \"none\" }}\n          />\n          {!showCustomisation && (\n            <motion.div\n              variants={buttonVariants2}\n              initial=\"initial\"\n              animate=\"enter\"\n              // exit=\"exit\"\n              className=\"w-1/3 h-full flex items-center justify-start text-white font-homeTitle text-2xl tracking-wide\"\n              onClick={() => setShowCustomisation(true)}\n            >\n              <div className=\"w-1/2 cursor-pointer hover:w-full transition-all duration-300 ease-in-out capitalize h-32 rounded-r-xl flex items-center justify-center bg-green-700 capitalise\">\n                Customise\n              </div>\n            </motion.div>\n          )}\n\n          {showCustomisation && (\n            <div className=\"w-1/3 p-4 rounded-lg \">\n              <motion.div\n                //same animation as notesVariants\n                variants={notesVariants}\n                initial=\"initial\"\n                animate=\"enter\"\n                exit=\"exit\"\n                className=\"w-full p-4 rounded-lg  bg-slate-200\"\n              >\n                <h2 className=\"text-2xl font-semibold mb-4\">\n                  Customize Your Recommendations\n                </h2>\n\n                {/* Use Top Tracks */}\n                <div\n                  className={`flex items-center mb-4 ${\n                    isTempoEnabled ||\n                    isDanceabilityEnabled ||\n                    isMaxDurationEnabled\n                      ? \"opacity-50\"\n                      : \"opacity-100\"\n                  }`}\n                >\n                  <label className=\"flex-auto text-lg\">\n                    Use Top Tracks for Recommendations\n                  </label>\n                  <input\n                    disabled={\n                      isTempoEnabled ||\n                      isDanceabilityEnabled ||\n                      isMaxDurationEnabled\n                    }\n                    type=\"checkbox\"\n                    checked={useTopTracks}\n                    onChange={() => setUseTopTracks(!useTopTracks)}\n                    className=\"form-checkbox h-5 w-5 text-blue-600\"\n                  />\n                </div>\n\n                {/* Tempo */}\n                <div\n                  className={`flex items-center gap-5 mb-4 ${\n                    useTopTracks ? \"opacity-50\" : \"opacity-100\"\n                  }`}\n                >\n                  <label className=\"flex-auto text-lg\">Tempo</label>\n\n                  {isTempoEnabled && (\n                    <Slider\n                      // color=\"\"\n                      size=\"small\"\n                      // defaultValue={70}\n                      max={200}\n                      min={40}\n                      disabled={useTopTracks}\n                      value={tempo}\n                      aria-label=\"Small\"\n                      valueLabelDisplay=\"auto\"\n                      onChange={(e, newValue) => setTempo(newValue)}\n                    />\n                  )}\n                  <input\n                    type=\"checkbox\"\n                    disabled={useTopTracks}\n                    checked={isTempoEnabled}\n                    onChange={() => setIsTempoEnabled(!isTempoEnabled)}\n                    className=\"form-checkbox h-5 w-5 text-blue-600\"\n                  />\n                </div>\n\n                {/* Danceability */}\n\n                <div\n                  className={`flex items-center gap-5 mb-4 ${\n                    useTopTracks ? \"opacity-50\" : \"opacity-100\"\n                  }`}\n                >\n                  <label className=\"flex-auto text-lg\">Danceability</label>\n\n                  {isDanceabilityEnabled && (\n                    <Slider\n                      // color=\"\"\n                      size=\"small\"\n                      // defaultValue={70}\n                      max={100}\n                      min={0}\n                      disabled={useTopTracks}\n                      value={danceability}\n                      aria-label=\"Small\"\n                      valueLabelDisplay=\"auto\"\n                      onChange={(e, newValue) => setDanceability(newValue)}\n                    />\n                  )}\n                  <input\n                    type=\"checkbox\"\n                    checked={isDanceabilityEnabled}\n                    disabled={useTopTracks}\n                    onChange={() =>\n                      setIsDanceabilityEnabled(!isDanceabilityEnabled)\n                    }\n                    className=\"form-checkbox h-5 w-5 text-blue-600\"\n                  />\n                </div>\n\n                {/* Max Duration */}\n\n                <div\n                  className={`flex items-center gap-5 mb-4 ${\n                    useTopTracks ? \"opacity-50\" : \"opacity-100\"\n                  }`}\n                >\n                  <label className=\"flex-auto text-lg\">Max Duration</label>\n\n                  {isMaxDurationEnabled && (\n                    <Slider\n                      // color=\"\"\n                      size=\"small\"\n                      // defaultValue={70}\n                      max={300}\n                      min={120}\n                      disabled={useTopTracks}\n                      value={maxDuration}\n                      aria-label=\"Small\"\n                      valueLabelDisplay=\"auto\"\n                      onChange={(e, newValue) => setMaxDuration(newValue)}\n                    />\n                  )}\n                  <input\n                    disabled={useTopTracks}\n                    type=\"checkbox\"\n                    checked={isMaxDurationEnabled}\n                    onChange={() =>\n                      setIsMaxDurationEnabled(!isMaxDurationEnabled)\n                    }\n                    className=\"form-checkbox h-5 w-5 text-blue-600\"\n                  />\n                </div>\n                <div className=\"w-full flex justify-end\">\n                  <button\n                    className=\"bg-red-600 px-2 py-1 rounded-lg  text-white font-bold\"\n                    onClick={() => setShowCustomisation(false)}\n                  >\n                    Close\n                  </button>\n                </div>\n              </motion.div>\n            </div>\n          )}\n        </div>\n        {emotionError && (\n          <div className=\"text-red-500 capitalize mt-5 text-4xl \">{`${emotionError}`}</div>\n        )}\n\n        {/* add nacl !emotionError */}\n        {isFetching && (\n          <div className=\"flex items-center mt-10 gap-6\">\n            <div className=\"w-[300px] h-[400px] bg-gray-300 rounded animate-pulse\"></div>\n            <div className=\"w-[300px] h-[400px] bg-gray-300 rounded animate-pulse\"></div>\n          </div>\n        )}\n\n        {/* Always show the detected emotion */}\n        {!emotionError && currentEmotion && (\n          <h2\n            className={`text-6xl uppercase flex gap-3 items-center justify-center font-homeTitle font-bold text-center mt-16  ${emotionColourMap[currentEmotion][1]}`}\n          >\n            {`You're Feeling ${currentEmotion}`}\n            <FontAwesomeIcon\n              icon={emotionIcon[currentEmotion]}\n              className={`text-5xl ${emotionColourMap[currentEmotion][1]}`}\n            />\n          </h2>\n        )}\n\n        {/* Show recommendations only if all conditions are met */}\n        {recommendations.length > 0 &&\n          !isFetching &&\n          !emotionError &&\n          !fetchError && (\n            <div className=\"w-full\">\n              <p className=\"text-3xl font-homeHeader mt-12 text-slate-400 tracking-wider uppercase font-bold text-center\">\n                Check out these songs!\n              </p>\n\n              <div className=\"flex justify-evenly mt-8 w-full\">\n                {recommendations.map((track) => (\n                  <div\n                    key={track.name}\n                    className={`p-3 flex flex-col justify-between max-w-[300px] rounded-lg bg-slate-700 mt-8`}\n                  >\n                    <a\n                      href={track.external_urls.spotify}\n                      className=\"max-w-[300px] max-h-[300px]\"\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                    >\n                      <img\n                        className=\"object-cover\"\n                        src={track.album.images[1].url}\n                        alt={`Album cover for ${track.name}`}\n                      ></img>\n                    </a>\n                    <div className=\"flex max-w-full items-end justify-between\">\n                      <div className=\"flex flex-col items-stretch justify-between\">\n                        <h3 className=\"font-bold text-xl mt-3 text-ellipsis \">\n                          {track.name}\n                        </h3>\n                        <p className=\"mt-2 text-slate-500 text-base\">\n                          by {track.artists[0].name}\n                        </p>\n                      </div>\n                      <button\n                        onClick={() => handleLikeClick(track)}\n                        className=\"\"\n                      >\n                        <FontAwesomeIcon\n                          icon={faStar}\n                          size=\"xl\"\n                          color={likedTracks[track.name] ? \"yellow\" : \"gray\"}\n                        />\n                      </button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n        {fetchError && (\n          <div className=\"text-red-500 w-1/2 mx-auto mt-5 capitalize text-3xl text-center\">\n            {fetchError}\n          </div>\n        )}\n        {fetchError === \"Please Login to use the recommended songs feature\" && (\n          <div className=\"w-1/2 tracking-wide mx-auto flex flex-col justify-center bg-slate-950 p-6 gap-2 rounded-2xl text-white font-navLinks text-xl mt-10 \">\n            <p>\n              Due to spotify API not granting an extension quota for public use\n              yet, the emotion detecter is available but for recommended songs\n              please use the following login to test some features\n            </p>\n            <p>ramzynanou03@gmail.com</p>\n            <p>Password: Tester123</p>\n            <p>\n              Or email me at <a>ramzynanou02@gmail.com</a> with your spotify\n              email for the features to be tailored to your music\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Page;\n","/Users/ramzynanou/Documents/emotify/src/app/firebase.js",[],[],"/Users/ramzynanou/Documents/emotify/src/app/layout.js",[],[],"/Users/ramzynanou/Documents/emotify/src/app/loading.js",[],[],"/Users/ramzynanou/Documents/emotify/src/app/page.js",["97"],[],"\"use client\";\nimport Instructions from \"@/components/Instructions\";\nimport {\n  faArrowDown,\n  faLocationArrow,\n  faPlay,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useSession } from \"next-auth/react\";\nimport Link from \"next/link\";\nimport { Link as ScrollLink, Element } from \"react-scroll\";\nimport { scroller } from 'react-scroll';\n\n\nexport default function Home() {\n  const session = useSession();\n\n  console.log(session);\n\n  return (\n    <>\n      <main className=\"w-full p-10 bg-slate-900\">\n        {/* main container */}\n        <div className=\"flex w-full\">\n          {/* left side */}\n          <div className=\"w-1/2 flex flex-col justify-between\">\n            {/* Line and triangle */}\n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-1/2 h-6 bg-gradient-to-r from-green-400 to-green-700\"></div>\n              <FontAwesomeIcon\n                icon={faPlay}\n                className=\"text-green-700 text-4xl\"\n              />\n            </div>\n            {/* Big title */}\n            <h1 className=\"uppercase text-8xl text-gradient font-homeTitle mt-10\">\n              Live your day with music\n            </h1>\n            {/* sub title */}\n            <p className=\"text-xl w-2/3 tracking-wider text-gray-200 mt-10 font-navLinks\">\n              Make your day more lively with a variety of music that suits your\n              mood, and log your feelings along the way\n            </p>\n            {/* controls */}\n            <div className=\"flex w-full mt-10 gap-3\">\n              <Link href={\"/detect\"}>\n                <button className=\"text-slate-300 bg-green-700 font-homeButtons uppercase text-3xl px-3 py-2 flex items-center gap-2 hover:bg-green-800 hover:rounded-lg transition-all duration-300\">\n                  Find Songs\n                  <FontAwesomeIcon\n                    icon={faLocationArrow}\n                    className=\"text-4xl\"\n                  />\n                </button>\n              </Link>\n              <Link href={\"/moodTracker\"}>\n                <button className=\" bg-slate-600 font-homeButtons uppercase text-3xl px-3 py-2 text-slate-300 hover:bg-slate-700 hover:rounded-lg flex transition-all duration-300 items-center gap-2\">\n                  Track Moods\n                  <FontAwesomeIcon\n                    icon={faLocationArrow}\n                    className=\"text-4xl\"\n                  />\n                </button>\n              </Link>\n            </div>\n            {/* right side */}\n          </div>\n          <div className=\"flex w-1/2 justify-center relative\">\n            <div className=\"w-96 h-96 rounded-full bg-green-700  border-8 border-slate-600 absolute top-30 left-0 z-0\"></div>\n            <img\n              className=\"z-10\"\n              src=\"/headphoneMan.png\"\n              alt=\"main with headphones\"\n            />\n\n            <div\n              onClick={() =>\n                scroller.scrollTo(\"instructions-section\", {\n                  duration: 1000,\n                  smooth: true,\n                })\n              }\n              className=\"w-[80%] group cursor-pointer flex justify-center items-center gap-4 py-6 absolute -bottom-2 z-20 rounded-full\"\n            >\n              <div className=\"absolute group-hover:blur-none inset-0 transition duration-300 bg-green-800 blur-sm rounded-full\"></div>\n              <p className=\"font-homeButtons select-none uppercase text-3xl text-slate-300 relative z-10\">\n                How It Works\n              </p>\n              <FontAwesomeIcon\n                icon={faArrowDown}\n                className=\"text-2xl text-slate-300 relative z-10\"\n              />\n            </div>\n          </div>\n          <div></div>\n        </div>\n      </main>\n      <Element name=\"instructions-section\">\n        <Instructions />\n      </Element>\n    </>\n  );\n}\n","/Users/ramzynanou/Documents/emotify/src/components/AuthProvider.jsx",[],[],"/Users/ramzynanou/Documents/emotify/src/components/Footer.jsx",[],[],"/Users/ramzynanou/Documents/emotify/src/components/Navbar.jsx",[],[],"/Users/ramzynanou/Documents/emotify/src/components/Notes.jsx",[],[],"/Users/ramzynanou/Documents/emotify/src/components/PlaylistModal.jsx",[],[],"/Users/ramzynanou/Documents/emotify/src/components/Tracks.jsx",["98"],[],"import React from \"react\";\nimport TracksCarousel from \"./TracksCarousel\";\n\nconst Tracks = (props) => {\n  return (\n    <div className=\"w-full h-full flex justify-center items-center\">\n      {props.tracksInfo.length === 0 && <p className=\"font-navLinks text-lg\">No Tracks Liked yet!</p>}\n      {props.tracksInfo.length > 0 && <TracksCarousel>\n        {props.tracksInfo.map((trackInfo, index) => (\n          <div\n            key={index}\n            className=\"flex flex-col w-2/3 border-2 overflow-hidden rounded-xl \"\n          >\n            {/* mood section */}\n            <div\n              className={`text-center ${\n                props.emotionsMap[trackInfo.mood][0]\n              } font-sans capitalize font-bold p-1`}\n            >\n              {trackInfo.mood}\n            </div>\n            {/* song image + url */}\n            <div className=\"\">\n              <a\n                href={trackInfo.url}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"w-full\"\n              >\n                <img\n                  src={trackInfo.imageSrc}\n                  alt=\"image\"\n                  className=\"w-full object-contain\"\n                />\n              </a>\n            </div>\n            {/* song track name and stuff */}\n            <div className=\"p-2\">\n              <h3 className=\"text-xl font-bold \">{trackInfo.trackName}</h3>\n              <p className=\"text-slate-300  text-lg\">\n                {trackInfo?.trackArtist || \"Adele\"}\n              </p>\n            </div>\n          </div>\n        ))}\n      </TracksCarousel>}\n    </div>\n  );\n};\n\nexport default Tracks;\n","/Users/ramzynanou/Documents/emotify/src/components/TracksCarousel.jsx",[],[],"/Users/ramzynanou/Documents/emotify/src/components/Instructions.jsx",["99","100","101","102","103","104"],[],"import React from \"react\";\nimport {\n  VerticalTimeline,\n  VerticalTimelineElement,\n} from \"react-vertical-timeline-component\";\nimport { motion } from \"framer-motion\";\n\nimport \"react-vertical-timeline-component/style.min.css\";\n\nconst Instructions = () => {\n  return (\n    <div className=\"bg-slate-900 px-10 py-32\">\n      <motion.div className=\"text-center\">\n        <p className=\"text-slate-400 tracking-wider uppercase text-2xl font-homeTitle\">\n          How to make the most of emotify\n        </p>\n        <h2 className=\"text-5xl text-slate-200 mt-8 uppercase font-homeTitle\">\n          Get started in 3 easy steps\n        </h2>\n      </motion.div>\n      <div className=\"mt-20 flex flex-col\">\n        <VerticalTimeline>\n          <VerticalTimelineElement\n            icon={\n              <div>\n                <img src=\"/number-1.png\" />\n              </div>\n            }\n            contentStyle={{\n              background: \"rgb(203 213 225)\",\n              color: \"rgb(15 23 42)\",\n            }}\n            contentArrowStyle={{ borderRight: \"7px solid £232631\" }}\n          >\n            <h3 className=\"font-navLinks text-3xl font-bold \">Step One</h3>\n            <p className=\"tracking-wider\">\n              Visit the detect page and follow the instructions to detect your\n              very first emotion! You can even add extra customization to get\n              the perfect recommendation\n            </p>\n          </VerticalTimelineElement>\n          <VerticalTimelineElement\n            icon={\n              <div>\n                <img src=\"/number-2.png\" />\n              </div>\n            }\n            contentStyle={{\n              background: \"rgb(203 213 225)\",\n              color: \"rgb(15 23 42)\",\n            }}\n            contentArrowStyle={{ borderRight: \"7px solid £232631\" }}\n          >\n            <h3 className=\"font-navLinks text-3xl font-bold \">Step Two</h3>\n            <p className=\"tracking-wider\">\n              Add a note about your thoughts and feelings to keep a\n              journal of your mood throughout. You can even like tracks to save\n              them to your journal if you ever want to revisit them\n            </p>\n          </VerticalTimelineElement>\n          <VerticalTimelineElement\n            icon={\n              <div>\n                <img src=\"/number-3.png\" />\n              </div>\n            }\n            contentStyle={{\n              background: \"rgb(203 213 225)\",\n              color: \"rgb(15 23 42)\",\n            }}\n            contentArrowStyle={{ borderRight: \"7px solid £232631\" }}\n          >\n            <h3 className=\"font-navLinks text-3xl font-bold \">Step Three</h3>\n            <p className=\"tracking-wider\">\n              Visit the journal page to get a calender overview of all your\n              emotions. Click on an date the get a rundown of your mood, notes\n              and liked songs that day!\n            </p>\n          </VerticalTimelineElement>\n        </VerticalTimeline>\n      </div>\n    </div>\n  );\n};\n\nexport default Instructions;\n","/Users/ramzynanou/Documents/emotify/src/app/moodTracker/loading.js",[],[],"/Users/ramzynanou/Documents/emotify/src/app/moodTracker/page.jsx",[],[],{"ruleId":"105","severity":1,"message":"106","line":756,"column":23,"nodeType":"107","endLine":760,"endColumn":24},{"ruleId":"105","severity":1,"message":"106","line":69,"column":13,"nodeType":"107","endLine":73,"endColumn":15},{"ruleId":"105","severity":1,"message":"106","line":30,"column":17,"nodeType":"107","endLine":34,"endColumn":19},{"ruleId":"105","severity":1,"message":"106","line":26,"column":17,"nodeType":"107","endLine":26,"endColumn":44},{"ruleId":"108","severity":1,"message":"109","line":26,"column":17,"nodeType":"107","endLine":26,"endColumn":44},{"ruleId":"105","severity":1,"message":"106","line":45,"column":17,"nodeType":"107","endLine":45,"endColumn":44},{"ruleId":"108","severity":1,"message":"109","line":45,"column":17,"nodeType":"107","endLine":45,"endColumn":44},{"ruleId":"105","severity":1,"message":"106","line":64,"column":17,"nodeType":"107","endLine":64,"endColumn":44},{"ruleId":"108","severity":1,"message":"109","line":64,"column":17,"nodeType":"107","endLine":64,"endColumn":44},"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images."]